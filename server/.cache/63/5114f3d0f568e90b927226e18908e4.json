{"id":"node_modules/@colyseus/schema/lib/Schema.js","dependencies":[{"name":"/Users/thegerman/Documents/asteroid_battlegrounds/client/package.json","includedInParent":true,"mtime":1569656483870},{"name":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/package.json","includedInParent":true,"mtime":1569656288742},{"name":"./spec","loc":{"line":16,"column":21},"parent":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/spec.js"},{"name":"./encoding/encode","loc":{"line":17,"column":21},"parent":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/encoding/encode.js"},{"name":"./encoding/decode","loc":{"line":18,"column":21},"parent":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/encoding/decode.js"},{"name":"./types/ArraySchema","loc":{"line":19,"column":28},"parent":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/types/ArraySchema.js"},{"name":"./types/MapSchema","loc":{"line":20,"column":26},"parent":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/types/MapSchema.js"},{"name":"./ChangeTree","loc":{"line":21,"column":27},"parent":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/Schema.js","resolved":"/Users/thegerman/Documents/asteroid_battlegrounds/client/node_modules/@colyseus/schema/lib/ChangeTree.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar spec_1 = require(\"./spec\");\nvar encode = require(\"./encoding/encode\");\nvar decode = require(\"./encoding/decode\");\nvar ArraySchema_1 = require(\"./types/ArraySchema\");\nvar MapSchema_1 = require(\"./types/MapSchema\");\nvar ChangeTree_1 = require(\"./ChangeTree\");\nvar EncodeSchemaError = /** @class */ (function (_super) {\n    __extends(EncodeSchemaError, _super);\n    function EncodeSchemaError() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return EncodeSchemaError;\n}(Error));\nfunction assertType(value, type, klass, field) {\n    var typeofTarget;\n    var allowNull = false;\n    switch (type) {\n        case \"number\":\n        case \"int8\":\n        case \"uint8\":\n        case \"int16\":\n        case \"uint16\":\n        case \"int32\":\n        case \"uint32\":\n        case \"int64\":\n        case \"uint64\":\n        case \"float32\":\n        case \"float64\":\n            typeofTarget = \"number\";\n            if (isNaN(value)) {\n                console.log(\"trying to encode \\\"NaN\\\" in \" + klass.constructor.name + \"#\" + field);\n            }\n            break;\n        case \"string\":\n            typeofTarget = \"string\";\n            allowNull = true;\n            break;\n        case \"boolean\":\n            // boolean is always encoded as true/false based on truthiness\n            return;\n    }\n    if (typeof (value) !== typeofTarget && (!allowNull || (allowNull && value !== null))) {\n        var foundValue = \"'\" + JSON.stringify(value) + \"'\" + (value && value.constructor && \" (\" + value.constructor.name + \")\");\n        throw new EncodeSchemaError(\"a '\" + typeofTarget + \"' was expected, but \" + foundValue + \" was provided in \" + klass.constructor.name + \"#\" + field);\n    }\n}\nfunction assertInstanceType(value, type, klass, field) {\n    if (!(value instanceof type)) {\n        throw new EncodeSchemaError(\"a '\" + type.name + \"' was expected, but '\" + value.constructor.name + \"' was provided in \" + klass.constructor.name + \"#\" + field);\n    }\n}\nfunction encodePrimitiveType(type, bytes, value, klass, field) {\n    var encodeFunc = encode[type];\n    if (value === undefined) {\n        bytes.push(spec_1.NIL);\n    }\n    else {\n        assertType(value, type, klass, field);\n    }\n    if (encodeFunc) {\n        encodeFunc(bytes, value);\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction decodePrimitiveType(type, bytes, it) {\n    var decodeFunc = decode[type];\n    if (decodeFunc) {\n        return decodeFunc(bytes, it);\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Schema encoder / decoder\n */\nvar Schema = /** @class */ (function () {\n    // allow inherited classes to have a constructor\n    function Schema() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // fix enumerability of fields for end-user\n        Object.defineProperties(this, {\n            $changes: { value: new ChangeTree_1.ChangeTree(), enumerable: false, writable: true },\n        });\n        var descriptors = this._descriptors;\n        if (descriptors) {\n            Object.defineProperties(this, descriptors);\n        }\n    }\n    Schema.onError = function (e) {\n        console.error(e);\n    };\n    Object.defineProperty(Schema.prototype, \"_schema\", {\n        get: function () { return this.constructor._schema; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_descriptors\", {\n        get: function () { return this.constructor._descriptors; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_indexes\", {\n        get: function () { return this.constructor._indexes; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_filters\", {\n        get: function () { return this.constructor._filters; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"$changed\", {\n        get: function () { return this.$changes.changed; },\n        enumerable: true,\n        configurable: true\n    });\n    Schema.prototype.decode = function (bytes, it) {\n        if (it === void 0) { it = { offset: 0 }; }\n        var changes = [];\n        var schema = this._schema;\n        var indexes = this._indexes;\n        var fieldsByIndex = {};\n        Object.keys(indexes).forEach(function (key) {\n            var value = indexes[key];\n            fieldsByIndex[value] = key;\n        });\n        var totalBytes = bytes.length;\n        // skip TYPE_ID of existing instances\n        if (bytes[it.offset] === spec_1.TYPE_ID) {\n            it.offset += 2;\n        }\n        var _loop_1 = function () {\n            var index = bytes[it.offset++];\n            if (index === spec_1.END_OF_STRUCTURE) {\n                return \"break\";\n            }\n            var field = fieldsByIndex[index];\n            var type = schema[field];\n            var value = void 0;\n            var change = void 0; // for triggering onChange\n            var hasChange = false;\n            if (type._schema) {\n                if (decode.nilCheck(bytes, it)) {\n                    it.offset++;\n                    value = null;\n                }\n                else {\n                    value = this_1[\"_\" + field] || this_1.createTypeInstance(bytes, it, type);\n                    value.decode(bytes, it);\n                }\n                hasChange = true;\n            }\n            else if (Array.isArray(type)) {\n                type = type[0];\n                change = [];\n                var valueRef_1 = this_1[\"_\" + field] || new ArraySchema_1.ArraySchema();\n                value = valueRef_1.clone(true);\n                var newLength_1 = decode.number(bytes, it);\n                var numChanges = Math.min(decode.number(bytes, it), newLength_1);\n                hasChange = (numChanges > 0);\n                // FIXME: this may not be reliable. possibly need to encode this variable during\n                // serializagion\n                var hasIndexChange = false;\n                // ensure current array has the same length as encoded one\n                if (value.length > newLength_1) {\n                    // decrease removed items from number of changes.\n                    // no need to iterate through them, as they're going to be removed.\n                    Array.prototype.splice.call(value, newLength_1).forEach(function (itemRemoved, i) {\n                        if (itemRemoved && itemRemoved.onRemove) {\n                            try {\n                                itemRemoved.onRemove();\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                        if (valueRef_1.onRemove) {\n                            try {\n                                valueRef_1.onRemove(itemRemoved, newLength_1 + i);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                    });\n                }\n                for (var i = 0; i < numChanges; i++) {\n                    var newIndex = decode.number(bytes, it);\n                    var indexChangedFrom = void 0; // index change check\n                    if (decode.indexChangeCheck(bytes, it)) {\n                        decode.uint8(bytes, it);\n                        indexChangedFrom = decode.number(bytes, it);\n                        hasIndexChange = true;\n                    }\n                    // // Simplified method?\n                    // let isNew = (\n                    //     (value[newIndex] !== valueRef[newIndex]) ||\n                    //     (value[newIndex] === undefined && valueRef[newIndex] === undefined)\n                    // ) && indexChangedFrom === undefined;\n                    var isNew = (!hasIndexChange && value[newIndex] === undefined) || (hasIndexChange && indexChangedFrom === undefined);\n                    if (type.prototype instanceof Schema) {\n                        var item = void 0;\n                        if (isNew) {\n                            item = this_1.createTypeInstance(bytes, it, type);\n                        }\n                        else if (indexChangedFrom !== undefined) {\n                            item = valueRef_1[indexChangedFrom];\n                        }\n                        else {\n                            item = valueRef_1[newIndex];\n                        }\n                        if (!item) {\n                            item = this_1.createTypeInstance(bytes, it, type);\n                            isNew = true;\n                        }\n                        if (decode.nilCheck(bytes, it)) {\n                            it.offset++;\n                            if (valueRef_1.onRemove) {\n                                try {\n                                    valueRef_1.onRemove(item, newIndex);\n                                }\n                                catch (e) {\n                                    Schema.onError(e);\n                                }\n                            }\n                            continue;\n                        }\n                        item.decode(bytes, it);\n                        value[newIndex] = item;\n                    }\n                    else {\n                        value[newIndex] = decodePrimitiveType(type, bytes, it);\n                    }\n                    if (isNew) {\n                        if (valueRef_1.onAdd) {\n                            try {\n                                valueRef_1.onAdd(value[newIndex], newIndex);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                    }\n                    else if (valueRef_1.onChange) {\n                        try {\n                            valueRef_1.onChange(value[newIndex], newIndex);\n                        }\n                        catch (e) {\n                            Schema.onError(e);\n                        }\n                    }\n                    change.push(value[newIndex]);\n                }\n            }\n            else if (type.map) {\n                type = type.map;\n                var valueRef = this_1[\"_\" + field] || new MapSchema_1.MapSchema();\n                value = valueRef.clone(true);\n                var length = decode.number(bytes, it);\n                hasChange = (length > 0);\n                // FIXME: this may not be reliable. possibly need to encode this variable during\n                // serializagion\n                var hasIndexChange = false;\n                var previousKeys = Object.keys(valueRef);\n                for (var i = 0; i < length; i++) {\n                    // `encodeAll` may indicate a higher number of indexes it actually encodes\n                    // TODO: do not encode a higher number than actual encoded entries\n                    if (bytes[it.offset] === undefined ||\n                        bytes[it.offset] === spec_1.END_OF_STRUCTURE) {\n                        break;\n                    }\n                    // index change check\n                    var previousKey = void 0;\n                    if (decode.indexChangeCheck(bytes, it)) {\n                        decode.uint8(bytes, it);\n                        previousKey = previousKeys[decode.number(bytes, it)];\n                        hasIndexChange = true;\n                    }\n                    var hasMapIndex = decode.numberCheck(bytes, it);\n                    var isSchemaType = typeof (type) !== \"string\";\n                    var newKey = (hasMapIndex)\n                        ? previousKeys[decode.number(bytes, it)]\n                        : decode.string(bytes, it);\n                    var item = void 0;\n                    var isNew = (!hasIndexChange && valueRef[newKey] === undefined) || (hasIndexChange && previousKey === undefined && hasMapIndex);\n                    if (isNew && isSchemaType) {\n                        item = this_1.createTypeInstance(bytes, it, type);\n                    }\n                    else if (previousKey !== undefined) {\n                        item = valueRef[previousKey];\n                    }\n                    else {\n                        item = valueRef[newKey];\n                    }\n                    if (decode.nilCheck(bytes, it)) {\n                        it.offset++;\n                        if (item && item.onRemove) {\n                            try {\n                                item.onRemove();\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                        if (valueRef.onRemove) {\n                            try {\n                                valueRef.onRemove(item, newKey);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                        delete value[newKey];\n                        continue;\n                    }\n                    else if (!isSchemaType) {\n                        value[newKey] = decodePrimitiveType(type, bytes, it);\n                    }\n                    else {\n                        item.decode(bytes, it);\n                        value[newKey] = item;\n                    }\n                    if (isNew) {\n                        if (valueRef.onAdd) {\n                            try {\n                                valueRef.onAdd(value[newKey], newKey);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                    }\n                    else if (valueRef.onChange) {\n                        try {\n                            valueRef.onChange(value[newKey], newKey);\n                        }\n                        catch (e) {\n                            Schema.onError(e);\n                        }\n                    }\n                }\n            }\n            else {\n                value = decodePrimitiveType(type, bytes, it);\n                hasChange = true;\n            }\n            if (hasChange && this_1.onChange) {\n                changes.push({\n                    field: field,\n                    value: change || value,\n                    previousValue: this_1[\"_\" + field]\n                });\n            }\n            this_1[\"_\" + field] = value;\n        };\n        var this_1 = this;\n        while (it.offset < totalBytes) {\n            var state_1 = _loop_1();\n            if (state_1 === \"break\")\n                break;\n        }\n        if (this.onChange && changes.length > 0) {\n            try {\n                this.onChange(changes);\n            }\n            catch (e) {\n                Schema.onError(e);\n            }\n        }\n        return this;\n    };\n    Schema.prototype.encode = function (root, encodeAll, client) {\n        var _this = this;\n        if (root === void 0) { root = this; }\n        if (encodeAll === void 0) { encodeAll = false; }\n        var encodedBytes = [];\n        // skip if nothing has changed\n        if (!this.$changes.changed && !encodeAll) {\n            this._encodeEndOfStructure(this, root, encodedBytes);\n            return encodedBytes;\n        }\n        var schema = this._schema;\n        var indexes = this._indexes;\n        var filters = this._filters;\n        var changes = (encodeAll || client)\n            ? this.$changes.allChanges\n            : this.$changes.changes;\n        var _loop_2 = function (i, l) {\n            var field = changes[i];\n            var type = schema[field];\n            var filter = (filters && filters[field]);\n            // const value = (filter && this.$allChanges[field]) || changes[field];\n            var value = this_2[\"_\" + field];\n            var fieldIndex = indexes[field];\n            // skip unchagned fields\n            if (value === undefined) {\n                return \"continue\";\n            }\n            var bytes = [];\n            if (type._schema) {\n                if (client && filter) {\n                    // skip if not allowed by custom filter\n                    if (!filter.call(this_2, client, value, root)) {\n                        return \"continue\";\n                    }\n                }\n                encode.number(bytes, fieldIndex);\n                // encode child object\n                if (value) {\n                    assertInstanceType(value, type, this_2, field);\n                    this_2.tryEncodeTypeId(bytes, type, value.constructor);\n                    bytes.push.apply(bytes, value.encode(root, encodeAll, client));\n                }\n                else {\n                    // value has been removed\n                    encode.uint8(bytes, spec_1.NIL);\n                }\n            }\n            else if (Array.isArray(type)) {\n                encode.number(bytes, fieldIndex);\n                // total of items in the array\n                encode.number(bytes, value.length);\n                var arrayChanges = ((encodeAll || client)\n                    ? value.$changes.allChanges\n                    : value.$changes.changes)\n                    .filter(function (index) { return _this[\"_\" + field][index] !== undefined; })\n                    .sort(function (a, b) { return a - b; });\n                // ensure number of changes doesn't exceed array length\n                var numChanges = arrayChanges.length;\n                // number of changed items\n                encode.number(bytes, numChanges);\n                var isChildSchema = typeof (type[0]) !== \"string\";\n                // assert ArraySchema was provided\n                assertInstanceType(this_2[\"_\" + field], ArraySchema_1.ArraySchema, this_2, field);\n                // encode Array of type\n                for (var j = 0; j < numChanges; j++) {\n                    var index = arrayChanges[j];\n                    var item = this_2[\"_\" + field][index];\n                    if (client && filter) {\n                        // skip if not allowed by custom filter\n                        if (!filter.call(this_2, client, item, root)) {\n                            continue;\n                        }\n                    }\n                    if (isChildSchema) { // is array of Schema\n                        encode.number(bytes, index);\n                        if (!encodeAll) {\n                            var indexChange = value.$changes.getIndexChange(item);\n                            if (indexChange !== undefined) {\n                                encode.uint8(bytes, spec_1.INDEX_CHANGE);\n                                encode.number(bytes, indexChange);\n                            }\n                        }\n                        assertInstanceType(item, type[0], this_2, field);\n                        this_2.tryEncodeTypeId(bytes, type[0], item.constructor);\n                        bytes.push.apply(bytes, item.encode(root, encodeAll, client));\n                    }\n                    else {\n                        encode.number(bytes, index);\n                        if (!encodePrimitiveType(type[0], bytes, item, this_2, field)) {\n                            console.log(\"cannot encode\", schema[field]);\n                            continue;\n                        }\n                    }\n                }\n                if (!encodeAll) {\n                    value.$changes.discard();\n                }\n            }\n            else if (type.map) {\n                // encode Map of type\n                encode.number(bytes, fieldIndex);\n                // TODO: during `encodeAll`, removed entries are not going to be encoded\n                var keys = (encodeAll || client)\n                    ? value.$changes.allChanges\n                    : value.$changes.changes;\n                encode.number(bytes, keys.length);\n                // const previousKeys = Object.keys(this[`_${field}`]); // this is costly!\n                var previousKeys = value.$changes.allChanges;\n                var isChildSchema = typeof (type.map) !== \"string\";\n                var numChanges = keys.length;\n                // assert MapSchema was provided\n                assertInstanceType(this_2[\"_\" + field], MapSchema_1.MapSchema, this_2, field);\n                for (var i_1 = 0; i_1 < numChanges; i_1++) {\n                    var key = (typeof (keys[i_1]) === \"number\" && previousKeys[keys[i_1]]) || keys[i_1];\n                    var item = this_2[\"_\" + field][key];\n                    var mapItemIndex = undefined;\n                    if (client && filter) {\n                        // skip if not allowed by custom filter\n                        if (!filter.call(this_2, client, item, root)) {\n                            continue;\n                        }\n                    }\n                    if (encodeAll) {\n                        if (item === undefined) {\n                            // previously deleted items are skipped during `encodeAll`\n                            continue;\n                        }\n                    }\n                    else {\n                        // encode index change\n                        var indexChange = value.$changes.getIndexChange(item);\n                        if (item && indexChange !== undefined) {\n                            encode.uint8(bytes, spec_1.INDEX_CHANGE);\n                            encode.number(bytes, this_2[\"_\" + field]._indexes.get(indexChange));\n                        }\n                        /**\n                         * - Allow item replacement\n                         * - Allow to use the index of a deleted item to encode as NIL\n                         */\n                        mapItemIndex = (!value.$changes.isDeleted(key) || !item)\n                            ? this_2[\"_\" + field]._indexes.get(key)\n                            : undefined;\n                    }\n                    if (mapItemIndex !== undefined) {\n                        encode.number(bytes, mapItemIndex);\n                    }\n                    else {\n                        encode.string(bytes, key);\n                    }\n                    if (item && isChildSchema) {\n                        assertInstanceType(item, type.map, this_2, field);\n                        this_2.tryEncodeTypeId(bytes, type.map, item.constructor);\n                        bytes.push.apply(bytes, item.encode(root, encodeAll, client));\n                    }\n                    else if (item !== undefined) {\n                        encodePrimitiveType(type.map, bytes, item, this_2, field);\n                    }\n                    else {\n                        // TODO: remove item\n                        // console.log(\"REMOVE KEY INDEX\", { key });\n                        // this[`_${field}`]._indexes.delete(key);\n                        encode.uint8(bytes, spec_1.NIL);\n                    }\n                }\n                if (!encodeAll) {\n                    value.$changes.discard();\n                    // TODO: track array/map indexes per client (for filtering)?\n                    if (!client) {\n                        // TODO: do not iterate though all MapSchema indexes here.\n                        this_2[\"_\" + field]._updateIndexes();\n                    }\n                }\n            }\n            else {\n                if (client && filter) {\n                    // skip if not allowed by custom filter\n                    if (!filter.call(this_2, client, value, root)) {\n                        return \"continue\";\n                    }\n                }\n                encode.number(bytes, fieldIndex);\n                if (!encodePrimitiveType(type, bytes, value, this_2, field)) {\n                    console.log(\"cannot encode\", schema[field]);\n                    return \"continue\";\n                }\n            }\n            encodedBytes = encodedBytes.concat(bytes);\n        };\n        var this_2 = this;\n        for (var i = 0, l = changes.length; i < l; i++) {\n            _loop_2(i, l);\n        }\n        // flag end of Schema object structure\n        this._encodeEndOfStructure(this, root, encodedBytes);\n        if (!encodeAll && !client) {\n            this.$changes.discard();\n        }\n        return encodedBytes;\n    };\n    Schema.prototype.encodeFiltered = function (client) {\n        return this.encode(this, false, client);\n    };\n    Schema.prototype.encodeAll = function () {\n        return this.encode(this, true);\n    };\n    Schema.prototype.encodeAllFiltered = function (client) {\n        return this.encode(this, true, client);\n    };\n    Schema.prototype.clone = function () {\n        var cloned = new (this.constructor);\n        var schema = this._schema;\n        for (var field in schema) {\n            if (typeof (this[field]) === \"object\" &&\n                typeof (this[field].clone) === \"function\") {\n                // deep clone\n                cloned[field] = this[field].clone();\n            }\n            else {\n                // primitive values\n                cloned[field] = this[field];\n            }\n        }\n        return cloned;\n    };\n    Schema.prototype.triggerAll = function () {\n        if (!this.onChange) {\n            return;\n        }\n        var changes = [];\n        var schema = this._schema;\n        for (var field in schema) {\n            if (this[field] !== undefined) {\n                changes.push({\n                    field: field,\n                    value: this[field],\n                    previousValue: undefined\n                });\n            }\n        }\n        try {\n            this.onChange(changes);\n        }\n        catch (e) {\n            Schema.onError(e);\n        }\n    };\n    Schema.prototype.toJSON = function () {\n        var schema = this._schema;\n        var obj = {};\n        for (var field in schema) {\n            if (this[field] !== null && typeof (this[field]) !== \"undefined\") {\n                obj[field] = (typeof (this[field].toJSON) === \"function\")\n                    ? this[field].toJSON()\n                    : this[\"_\" + field];\n            }\n        }\n        return obj;\n    };\n    Schema.prototype._encodeEndOfStructure = function (instance, root, bytes) {\n        if (instance !== root) {\n            bytes.push(spec_1.END_OF_STRUCTURE);\n        }\n    };\n    Schema.prototype.tryEncodeTypeId = function (bytes, type, targetType) {\n        if (type._typeid !== targetType._typeid) {\n            encode.uint8(bytes, spec_1.TYPE_ID);\n            encode.uint8(bytes, targetType._typeid);\n        }\n    };\n    Schema.prototype.createTypeInstance = function (bytes, it, type) {\n        if (bytes[it.offset] === spec_1.TYPE_ID) {\n            it.offset++;\n            var anotherType = this.constructor._context.get(decode.uint8(bytes, it));\n            return new anotherType();\n        }\n        else {\n            return new type();\n        }\n    };\n    return Schema;\n}());\nexports.Schema = Schema;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/@colyseus/schema/lib/Schema.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}}],"sources":{"node_modules/@colyseus/schema/lib/Schema.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar spec_1 = require(\"./spec\");\nvar encode = require(\"./encoding/encode\");\nvar decode = require(\"./encoding/decode\");\nvar ArraySchema_1 = require(\"./types/ArraySchema\");\nvar MapSchema_1 = require(\"./types/MapSchema\");\nvar ChangeTree_1 = require(\"./ChangeTree\");\nvar EncodeSchemaError = /** @class */ (function (_super) {\n    __extends(EncodeSchemaError, _super);\n    function EncodeSchemaError() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return EncodeSchemaError;\n}(Error));\nfunction assertType(value, type, klass, field) {\n    var typeofTarget;\n    var allowNull = false;\n    switch (type) {\n        case \"number\":\n        case \"int8\":\n        case \"uint8\":\n        case \"int16\":\n        case \"uint16\":\n        case \"int32\":\n        case \"uint32\":\n        case \"int64\":\n        case \"uint64\":\n        case \"float32\":\n        case \"float64\":\n            typeofTarget = \"number\";\n            if (isNaN(value)) {\n                console.log(\"trying to encode \\\"NaN\\\" in \" + klass.constructor.name + \"#\" + field);\n            }\n            break;\n        case \"string\":\n            typeofTarget = \"string\";\n            allowNull = true;\n            break;\n        case \"boolean\":\n            // boolean is always encoded as true/false based on truthiness\n            return;\n    }\n    if (typeof (value) !== typeofTarget && (!allowNull || (allowNull && value !== null))) {\n        var foundValue = \"'\" + JSON.stringify(value) + \"'\" + (value && value.constructor && \" (\" + value.constructor.name + \")\");\n        throw new EncodeSchemaError(\"a '\" + typeofTarget + \"' was expected, but \" + foundValue + \" was provided in \" + klass.constructor.name + \"#\" + field);\n    }\n}\nfunction assertInstanceType(value, type, klass, field) {\n    if (!(value instanceof type)) {\n        throw new EncodeSchemaError(\"a '\" + type.name + \"' was expected, but '\" + value.constructor.name + \"' was provided in \" + klass.constructor.name + \"#\" + field);\n    }\n}\nfunction encodePrimitiveType(type, bytes, value, klass, field) {\n    var encodeFunc = encode[type];\n    if (value === undefined) {\n        bytes.push(spec_1.NIL);\n    }\n    else {\n        assertType(value, type, klass, field);\n    }\n    if (encodeFunc) {\n        encodeFunc(bytes, value);\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nfunction decodePrimitiveType(type, bytes, it) {\n    var decodeFunc = decode[type];\n    if (decodeFunc) {\n        return decodeFunc(bytes, it);\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Schema encoder / decoder\n */\nvar Schema = /** @class */ (function () {\n    // allow inherited classes to have a constructor\n    function Schema() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // fix enumerability of fields for end-user\n        Object.defineProperties(this, {\n            $changes: { value: new ChangeTree_1.ChangeTree(), enumerable: false, writable: true },\n        });\n        var descriptors = this._descriptors;\n        if (descriptors) {\n            Object.defineProperties(this, descriptors);\n        }\n    }\n    Schema.onError = function (e) {\n        console.error(e);\n    };\n    Object.defineProperty(Schema.prototype, \"_schema\", {\n        get: function () { return this.constructor._schema; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_descriptors\", {\n        get: function () { return this.constructor._descriptors; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_indexes\", {\n        get: function () { return this.constructor._indexes; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"_filters\", {\n        get: function () { return this.constructor._filters; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Schema.prototype, \"$changed\", {\n        get: function () { return this.$changes.changed; },\n        enumerable: true,\n        configurable: true\n    });\n    Schema.prototype.decode = function (bytes, it) {\n        if (it === void 0) { it = { offset: 0 }; }\n        var changes = [];\n        var schema = this._schema;\n        var indexes = this._indexes;\n        var fieldsByIndex = {};\n        Object.keys(indexes).forEach(function (key) {\n            var value = indexes[key];\n            fieldsByIndex[value] = key;\n        });\n        var totalBytes = bytes.length;\n        // skip TYPE_ID of existing instances\n        if (bytes[it.offset] === spec_1.TYPE_ID) {\n            it.offset += 2;\n        }\n        var _loop_1 = function () {\n            var index = bytes[it.offset++];\n            if (index === spec_1.END_OF_STRUCTURE) {\n                return \"break\";\n            }\n            var field = fieldsByIndex[index];\n            var type = schema[field];\n            var value = void 0;\n            var change = void 0; // for triggering onChange\n            var hasChange = false;\n            if (type._schema) {\n                if (decode.nilCheck(bytes, it)) {\n                    it.offset++;\n                    value = null;\n                }\n                else {\n                    value = this_1[\"_\" + field] || this_1.createTypeInstance(bytes, it, type);\n                    value.decode(bytes, it);\n                }\n                hasChange = true;\n            }\n            else if (Array.isArray(type)) {\n                type = type[0];\n                change = [];\n                var valueRef_1 = this_1[\"_\" + field] || new ArraySchema_1.ArraySchema();\n                value = valueRef_1.clone(true);\n                var newLength_1 = decode.number(bytes, it);\n                var numChanges = Math.min(decode.number(bytes, it), newLength_1);\n                hasChange = (numChanges > 0);\n                // FIXME: this may not be reliable. possibly need to encode this variable during\n                // serializagion\n                var hasIndexChange = false;\n                // ensure current array has the same length as encoded one\n                if (value.length > newLength_1) {\n                    // decrease removed items from number of changes.\n                    // no need to iterate through them, as they're going to be removed.\n                    Array.prototype.splice.call(value, newLength_1).forEach(function (itemRemoved, i) {\n                        if (itemRemoved && itemRemoved.onRemove) {\n                            try {\n                                itemRemoved.onRemove();\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                        if (valueRef_1.onRemove) {\n                            try {\n                                valueRef_1.onRemove(itemRemoved, newLength_1 + i);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                    });\n                }\n                for (var i = 0; i < numChanges; i++) {\n                    var newIndex = decode.number(bytes, it);\n                    var indexChangedFrom = void 0; // index change check\n                    if (decode.indexChangeCheck(bytes, it)) {\n                        decode.uint8(bytes, it);\n                        indexChangedFrom = decode.number(bytes, it);\n                        hasIndexChange = true;\n                    }\n                    // // Simplified method?\n                    // let isNew = (\n                    //     (value[newIndex] !== valueRef[newIndex]) ||\n                    //     (value[newIndex] === undefined && valueRef[newIndex] === undefined)\n                    // ) && indexChangedFrom === undefined;\n                    var isNew = (!hasIndexChange && value[newIndex] === undefined) || (hasIndexChange && indexChangedFrom === undefined);\n                    if (type.prototype instanceof Schema) {\n                        var item = void 0;\n                        if (isNew) {\n                            item = this_1.createTypeInstance(bytes, it, type);\n                        }\n                        else if (indexChangedFrom !== undefined) {\n                            item = valueRef_1[indexChangedFrom];\n                        }\n                        else {\n                            item = valueRef_1[newIndex];\n                        }\n                        if (!item) {\n                            item = this_1.createTypeInstance(bytes, it, type);\n                            isNew = true;\n                        }\n                        if (decode.nilCheck(bytes, it)) {\n                            it.offset++;\n                            if (valueRef_1.onRemove) {\n                                try {\n                                    valueRef_1.onRemove(item, newIndex);\n                                }\n                                catch (e) {\n                                    Schema.onError(e);\n                                }\n                            }\n                            continue;\n                        }\n                        item.decode(bytes, it);\n                        value[newIndex] = item;\n                    }\n                    else {\n                        value[newIndex] = decodePrimitiveType(type, bytes, it);\n                    }\n                    if (isNew) {\n                        if (valueRef_1.onAdd) {\n                            try {\n                                valueRef_1.onAdd(value[newIndex], newIndex);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                    }\n                    else if (valueRef_1.onChange) {\n                        try {\n                            valueRef_1.onChange(value[newIndex], newIndex);\n                        }\n                        catch (e) {\n                            Schema.onError(e);\n                        }\n                    }\n                    change.push(value[newIndex]);\n                }\n            }\n            else if (type.map) {\n                type = type.map;\n                var valueRef = this_1[\"_\" + field] || new MapSchema_1.MapSchema();\n                value = valueRef.clone(true);\n                var length = decode.number(bytes, it);\n                hasChange = (length > 0);\n                // FIXME: this may not be reliable. possibly need to encode this variable during\n                // serializagion\n                var hasIndexChange = false;\n                var previousKeys = Object.keys(valueRef);\n                for (var i = 0; i < length; i++) {\n                    // `encodeAll` may indicate a higher number of indexes it actually encodes\n                    // TODO: do not encode a higher number than actual encoded entries\n                    if (bytes[it.offset] === undefined ||\n                        bytes[it.offset] === spec_1.END_OF_STRUCTURE) {\n                        break;\n                    }\n                    // index change check\n                    var previousKey = void 0;\n                    if (decode.indexChangeCheck(bytes, it)) {\n                        decode.uint8(bytes, it);\n                        previousKey = previousKeys[decode.number(bytes, it)];\n                        hasIndexChange = true;\n                    }\n                    var hasMapIndex = decode.numberCheck(bytes, it);\n                    var isSchemaType = typeof (type) !== \"string\";\n                    var newKey = (hasMapIndex)\n                        ? previousKeys[decode.number(bytes, it)]\n                        : decode.string(bytes, it);\n                    var item = void 0;\n                    var isNew = (!hasIndexChange && valueRef[newKey] === undefined) || (hasIndexChange && previousKey === undefined && hasMapIndex);\n                    if (isNew && isSchemaType) {\n                        item = this_1.createTypeInstance(bytes, it, type);\n                    }\n                    else if (previousKey !== undefined) {\n                        item = valueRef[previousKey];\n                    }\n                    else {\n                        item = valueRef[newKey];\n                    }\n                    if (decode.nilCheck(bytes, it)) {\n                        it.offset++;\n                        if (item && item.onRemove) {\n                            try {\n                                item.onRemove();\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                        if (valueRef.onRemove) {\n                            try {\n                                valueRef.onRemove(item, newKey);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                        delete value[newKey];\n                        continue;\n                    }\n                    else if (!isSchemaType) {\n                        value[newKey] = decodePrimitiveType(type, bytes, it);\n                    }\n                    else {\n                        item.decode(bytes, it);\n                        value[newKey] = item;\n                    }\n                    if (isNew) {\n                        if (valueRef.onAdd) {\n                            try {\n                                valueRef.onAdd(value[newKey], newKey);\n                            }\n                            catch (e) {\n                                Schema.onError(e);\n                            }\n                        }\n                    }\n                    else if (valueRef.onChange) {\n                        try {\n                            valueRef.onChange(value[newKey], newKey);\n                        }\n                        catch (e) {\n                            Schema.onError(e);\n                        }\n                    }\n                }\n            }\n            else {\n                value = decodePrimitiveType(type, bytes, it);\n                hasChange = true;\n            }\n            if (hasChange && this_1.onChange) {\n                changes.push({\n                    field: field,\n                    value: change || value,\n                    previousValue: this_1[\"_\" + field]\n                });\n            }\n            this_1[\"_\" + field] = value;\n        };\n        var this_1 = this;\n        while (it.offset < totalBytes) {\n            var state_1 = _loop_1();\n            if (state_1 === \"break\")\n                break;\n        }\n        if (this.onChange && changes.length > 0) {\n            try {\n                this.onChange(changes);\n            }\n            catch (e) {\n                Schema.onError(e);\n            }\n        }\n        return this;\n    };\n    Schema.prototype.encode = function (root, encodeAll, client) {\n        var _this = this;\n        if (root === void 0) { root = this; }\n        if (encodeAll === void 0) { encodeAll = false; }\n        var encodedBytes = [];\n        // skip if nothing has changed\n        if (!this.$changes.changed && !encodeAll) {\n            this._encodeEndOfStructure(this, root, encodedBytes);\n            return encodedBytes;\n        }\n        var schema = this._schema;\n        var indexes = this._indexes;\n        var filters = this._filters;\n        var changes = (encodeAll || client)\n            ? this.$changes.allChanges\n            : this.$changes.changes;\n        var _loop_2 = function (i, l) {\n            var field = changes[i];\n            var type = schema[field];\n            var filter = (filters && filters[field]);\n            // const value = (filter && this.$allChanges[field]) || changes[field];\n            var value = this_2[\"_\" + field];\n            var fieldIndex = indexes[field];\n            // skip unchagned fields\n            if (value === undefined) {\n                return \"continue\";\n            }\n            var bytes = [];\n            if (type._schema) {\n                if (client && filter) {\n                    // skip if not allowed by custom filter\n                    if (!filter.call(this_2, client, value, root)) {\n                        return \"continue\";\n                    }\n                }\n                encode.number(bytes, fieldIndex);\n                // encode child object\n                if (value) {\n                    assertInstanceType(value, type, this_2, field);\n                    this_2.tryEncodeTypeId(bytes, type, value.constructor);\n                    bytes.push.apply(bytes, value.encode(root, encodeAll, client));\n                }\n                else {\n                    // value has been removed\n                    encode.uint8(bytes, spec_1.NIL);\n                }\n            }\n            else if (Array.isArray(type)) {\n                encode.number(bytes, fieldIndex);\n                // total of items in the array\n                encode.number(bytes, value.length);\n                var arrayChanges = ((encodeAll || client)\n                    ? value.$changes.allChanges\n                    : value.$changes.changes)\n                    .filter(function (index) { return _this[\"_\" + field][index] !== undefined; })\n                    .sort(function (a, b) { return a - b; });\n                // ensure number of changes doesn't exceed array length\n                var numChanges = arrayChanges.length;\n                // number of changed items\n                encode.number(bytes, numChanges);\n                var isChildSchema = typeof (type[0]) !== \"string\";\n                // assert ArraySchema was provided\n                assertInstanceType(this_2[\"_\" + field], ArraySchema_1.ArraySchema, this_2, field);\n                // encode Array of type\n                for (var j = 0; j < numChanges; j++) {\n                    var index = arrayChanges[j];\n                    var item = this_2[\"_\" + field][index];\n                    if (client && filter) {\n                        // skip if not allowed by custom filter\n                        if (!filter.call(this_2, client, item, root)) {\n                            continue;\n                        }\n                    }\n                    if (isChildSchema) { // is array of Schema\n                        encode.number(bytes, index);\n                        if (!encodeAll) {\n                            var indexChange = value.$changes.getIndexChange(item);\n                            if (indexChange !== undefined) {\n                                encode.uint8(bytes, spec_1.INDEX_CHANGE);\n                                encode.number(bytes, indexChange);\n                            }\n                        }\n                        assertInstanceType(item, type[0], this_2, field);\n                        this_2.tryEncodeTypeId(bytes, type[0], item.constructor);\n                        bytes.push.apply(bytes, item.encode(root, encodeAll, client));\n                    }\n                    else {\n                        encode.number(bytes, index);\n                        if (!encodePrimitiveType(type[0], bytes, item, this_2, field)) {\n                            console.log(\"cannot encode\", schema[field]);\n                            continue;\n                        }\n                    }\n                }\n                if (!encodeAll) {\n                    value.$changes.discard();\n                }\n            }\n            else if (type.map) {\n                // encode Map of type\n                encode.number(bytes, fieldIndex);\n                // TODO: during `encodeAll`, removed entries are not going to be encoded\n                var keys = (encodeAll || client)\n                    ? value.$changes.allChanges\n                    : value.$changes.changes;\n                encode.number(bytes, keys.length);\n                // const previousKeys = Object.keys(this[`_${field}`]); // this is costly!\n                var previousKeys = value.$changes.allChanges;\n                var isChildSchema = typeof (type.map) !== \"string\";\n                var numChanges = keys.length;\n                // assert MapSchema was provided\n                assertInstanceType(this_2[\"_\" + field], MapSchema_1.MapSchema, this_2, field);\n                for (var i_1 = 0; i_1 < numChanges; i_1++) {\n                    var key = (typeof (keys[i_1]) === \"number\" && previousKeys[keys[i_1]]) || keys[i_1];\n                    var item = this_2[\"_\" + field][key];\n                    var mapItemIndex = undefined;\n                    if (client && filter) {\n                        // skip if not allowed by custom filter\n                        if (!filter.call(this_2, client, item, root)) {\n                            continue;\n                        }\n                    }\n                    if (encodeAll) {\n                        if (item === undefined) {\n                            // previously deleted items are skipped during `encodeAll`\n                            continue;\n                        }\n                    }\n                    else {\n                        // encode index change\n                        var indexChange = value.$changes.getIndexChange(item);\n                        if (item && indexChange !== undefined) {\n                            encode.uint8(bytes, spec_1.INDEX_CHANGE);\n                            encode.number(bytes, this_2[\"_\" + field]._indexes.get(indexChange));\n                        }\n                        /**\n                         * - Allow item replacement\n                         * - Allow to use the index of a deleted item to encode as NIL\n                         */\n                        mapItemIndex = (!value.$changes.isDeleted(key) || !item)\n                            ? this_2[\"_\" + field]._indexes.get(key)\n                            : undefined;\n                    }\n                    if (mapItemIndex !== undefined) {\n                        encode.number(bytes, mapItemIndex);\n                    }\n                    else {\n                        encode.string(bytes, key);\n                    }\n                    if (item && isChildSchema) {\n                        assertInstanceType(item, type.map, this_2, field);\n                        this_2.tryEncodeTypeId(bytes, type.map, item.constructor);\n                        bytes.push.apply(bytes, item.encode(root, encodeAll, client));\n                    }\n                    else if (item !== undefined) {\n                        encodePrimitiveType(type.map, bytes, item, this_2, field);\n                    }\n                    else {\n                        // TODO: remove item\n                        // console.log(\"REMOVE KEY INDEX\", { key });\n                        // this[`_${field}`]._indexes.delete(key);\n                        encode.uint8(bytes, spec_1.NIL);\n                    }\n                }\n                if (!encodeAll) {\n                    value.$changes.discard();\n                    // TODO: track array/map indexes per client (for filtering)?\n                    if (!client) {\n                        // TODO: do not iterate though all MapSchema indexes here.\n                        this_2[\"_\" + field]._updateIndexes();\n                    }\n                }\n            }\n            else {\n                if (client && filter) {\n                    // skip if not allowed by custom filter\n                    if (!filter.call(this_2, client, value, root)) {\n                        return \"continue\";\n                    }\n                }\n                encode.number(bytes, fieldIndex);\n                if (!encodePrimitiveType(type, bytes, value, this_2, field)) {\n                    console.log(\"cannot encode\", schema[field]);\n                    return \"continue\";\n                }\n            }\n            encodedBytes = encodedBytes.concat(bytes);\n        };\n        var this_2 = this;\n        for (var i = 0, l = changes.length; i < l; i++) {\n            _loop_2(i, l);\n        }\n        // flag end of Schema object structure\n        this._encodeEndOfStructure(this, root, encodedBytes);\n        if (!encodeAll && !client) {\n            this.$changes.discard();\n        }\n        return encodedBytes;\n    };\n    Schema.prototype.encodeFiltered = function (client) {\n        return this.encode(this, false, client);\n    };\n    Schema.prototype.encodeAll = function () {\n        return this.encode(this, true);\n    };\n    Schema.prototype.encodeAllFiltered = function (client) {\n        return this.encode(this, true, client);\n    };\n    Schema.prototype.clone = function () {\n        var cloned = new (this.constructor);\n        var schema = this._schema;\n        for (var field in schema) {\n            if (typeof (this[field]) === \"object\" &&\n                typeof (this[field].clone) === \"function\") {\n                // deep clone\n                cloned[field] = this[field].clone();\n            }\n            else {\n                // primitive values\n                cloned[field] = this[field];\n            }\n        }\n        return cloned;\n    };\n    Schema.prototype.triggerAll = function () {\n        if (!this.onChange) {\n            return;\n        }\n        var changes = [];\n        var schema = this._schema;\n        for (var field in schema) {\n            if (this[field] !== undefined) {\n                changes.push({\n                    field: field,\n                    value: this[field],\n                    previousValue: undefined\n                });\n            }\n        }\n        try {\n            this.onChange(changes);\n        }\n        catch (e) {\n            Schema.onError(e);\n        }\n    };\n    Schema.prototype.toJSON = function () {\n        var schema = this._schema;\n        var obj = {};\n        for (var field in schema) {\n            if (this[field] !== null && typeof (this[field]) !== \"undefined\") {\n                obj[field] = (typeof (this[field].toJSON) === \"function\")\n                    ? this[field].toJSON()\n                    : this[\"_\" + field];\n            }\n        }\n        return obj;\n    };\n    Schema.prototype._encodeEndOfStructure = function (instance, root, bytes) {\n        if (instance !== root) {\n            bytes.push(spec_1.END_OF_STRUCTURE);\n        }\n    };\n    Schema.prototype.tryEncodeTypeId = function (bytes, type, targetType) {\n        if (type._typeid !== targetType._typeid) {\n            encode.uint8(bytes, spec_1.TYPE_ID);\n            encode.uint8(bytes, targetType._typeid);\n        }\n    };\n    Schema.prototype.createTypeInstance = function (bytes, it, type) {\n        if (bytes[it.offset] === spec_1.TYPE_ID) {\n            it.offset++;\n            var anotherType = this.constructor._context.get(decode.uint8(bytes, it));\n            return new anotherType();\n        }\n        else {\n            return new type();\n        }\n    };\n    return Schema;\n}());\nexports.Schema = Schema;\n"},"lineCount":676}},"error":null,"hash":"f9471a745ab8e06a872417ac6ab8fb04","cacheData":{"env":{}}}